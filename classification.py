# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pdqwL-ItMTw9JSuDDztMgNLIQFtkvXpS
"""

# iris_classification.py

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris

# Load Iris dataset
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name='target')

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Streamlit App
st.title("Iris Flower Classification App")

# Input features
sepal_length = st.slider("Sepal Length", float(X['sepal length (cm)'].min()), float(X['sepal length (cm)'].max()))
sepal_width = st.slider("Sepal Width", float(X['sepal width (cm)'].min()), float(X['sepal width (cm)'].max()))
petal_length = st.slider("Petal Length", float(X['petal length (cm)'].min()), float(X['petal length (cm)'].max()))
petal_width = st.slider("Petal Width", float(X['petal width (cm)'].min()), float(X['petal width (cm)'].max()))

# Make predictions
input_data = [[sepal_length, sepal_width, petal_length, petal_width]]
prediction = model.predict(input_data)[0]
prediction_label = iris.target_names[prediction]

# Display the prediction
st.subheader("Prediction:")
st.write(f"The predicted iris species is {prediction_label}")

# Evaluate model accuracy on test set
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
st.subheader("Model Accuracy on Test Set:")
st.write(f"The accuracy of the model is {accuracy:.2f}")